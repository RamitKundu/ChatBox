package com.niit.ChatBoxRestService.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.niit.ChatBoxBackEnd.Dao.UserDao;
import com.niit.ChatBoxBackEnd.Model.User;

@RestController
public class UserController {
	@Autowired
	UserDao userDao;
	
	@Autowired
	User user;
	
	
	@PostMapping("/register")
	public ResponseEntity<User> registerUser(@RequestBody User user){
		if(userDao.getById(user.getUserId())==null){
			userDao.add(user);
				user.setErrorCode("200");
				user.setErrorMessage("ThankYou for the Registration " +user.getName());
			}
			else{
				user.setErrorCode("404");
				user.setErrorMessage("Error in Registering");
			}
			return new ResponseEntity<User>(user,HttpStatus.OK);
		}
	
	
	@PostMapping("/login/{userId}/{password}")
	public ResponseEntity<User> validate(@PathVariable("userId")int userId,@PathVariable("password")String password){
		
		if(userDao.validate(userId, password)==true){
		    user=userDao.getById(userId);
			user.setErrorCode("200");
			user.setErrorMessage("Welcome to ChatBox" +user.getName());
		}
		else{
			
		user.setErrorCode("404");
		user.setErrorMessage("Invalid Credentials.Please Login again");
		}
		
		return new ResponseEntity<User>(user,HttpStatus.OK);
	
	}
	
	@PostMapping("/updateuser")
	public ResponseEntity<User> updateUser(@RequestBody User user){
		user=userDao.getById(user.getUserId());
		if(user!=null){
			userDao.update(user);
			user.setErrorCode("200");
			user.setErrorMessage("Profile is being updated");
		}
		else{
			user.setErrorCode("404");
			user.setErrorMessage("Profile cannot be updated");
		}
		
		return new ResponseEntity<User>(user,HttpStatus.OK);
		
		
	}
	
	@GetMapping("/getById/{userId}")
	public ResponseEntity<User> getById(@PathVariable("userId") int userId){
		if(userDao.getById(userId)==null){
		user.setErrorCode("404");
		user.setErrorMessage("No user found by Id");
		}else{
			user=userDao.getById(userId);
			user.setErrorCode("200");
			user.setErrorMessage("Valid User found by Id");
		}
		return new ResponseEntity<User>(user,HttpStatus.OK);

}	
	
	@GetMapping("/getall")
	 public ResponseEntity <List<User>> listofUser(){
		List<User> userlist=userDao.getAllUser();
		if(userlist.isEmpty()){
			user.setErrorCode("100");
			user.setErrorMessage("Users not found in the list");
			return new ResponseEntity<List<User>>(userlist,HttpStatus.OK);
		}
		user.setErrorCode("200");
		user.setErrorMessage("Users found in the list");
		return new ResponseEntity<List<User>>(userlist,HttpStatus.OK);
		
		 
}
		
	@DeleteMapping("/delete/{userId}")
	public ResponseEntity<User> deleteUser(@PathVariable("userId") int userId){
		User user=userDao.getById(userId);
		userDao.delete(user);
		return new ResponseEntity<User>(user,HttpStatus.OK);
		
	}
	
}

